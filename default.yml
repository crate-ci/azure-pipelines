parameters:
  minrust: 1.32.0 # Rust 2018 with uniform paths
  setup: []
  services: {}
  env: {}
  cross: true
  dir: "."
  clippy: -D warnings

jobs:
 - job: style
   displayName: Style linting
   strategy:
     matrix:
       stable:
         rust: stable
       beta:
         rust: beta
   pool:
     vmImage: ubuntu-18.04
   continueOnError: $[eq(variables.rust, 'beta')]
   steps:
     - template: install-rust.yml
       parameters:
         rust: $(rust)
         components:
           - rustfmt
           - clippy
     # Run any user-specific setup steps
     - ${{ parameters.setup }}
     - script: cargo fmt --all -- --check
       workingDirectory: ${{ parameters.dir }}
       displayName: cargo fmt --check
     - script: cargo clippy --all -- ${{ parameters.clippy }}
       workingDirectory: ${{ parameters.dir }}
       displayName: cargo clippy -- ${{ parameters.clippy }}
 - job: main
   displayName: Compile and test
   dependsOn: []
   ${{ if eq('true', parameters.cross) }}:
     strategy:
       matrix:
         "Linux (nightly)":
           vmImage: ubuntu-18.04
           rust: nightly
         "Linux (beta)":
           vmImage: ubuntu-18.04
           rust: beta
         Linux:
           vmImage: ubuntu-18.04
           rust: stable
         MacOS:
           vmImage: macOS-10.15
           rust: stable
         Windows:
           vmImage: windows-2019
           rust: stable
   ${{ if ne('true', parameters.cross) }}:
     strategy:
       matrix:
         "Linux (nightly)":
           vmImage: ubuntu-18.04
           rust: nightly
         "Linux (beta)":
           vmImage: ubuntu-18.04
           rust: beta
         Linux:
           vmImage: ubuntu-18.04
           rust: stable
   pool:
     vmImage: $(vmImage)
   services:
     ${{ insert }}: ${{ parameters.services }}
   continueOnError: $[eq(variables.rust, 'nightly')]
   steps:
     - template: install-rust.yml
       parameters:
         rust: $(rust)
     # Run any user-specific setup steps
     - ${{ parameters.setup }}
     - script: cargo check
       workingDirectory: ${{ parameters.dir }}
       displayName: cargo check
     - script: cargo check --no-default-features
       workingDirectory: ${{ parameters.dir }}
       displayName: cargo check --no-default-features
     - script: cargo check --all-features
       workingDirectory: ${{ parameters.dir }}
       displayName: cargo check --all-features
     - script: cargo test --all-features
       workingDirectory: ${{ parameters.dir }}
       displayName: cargo test
       env:
         ${{ insert }}: ${{ parameters.env }}
     - script: cargo doc --no-deps
       workingDirectory: ${{ parameters.dir }}
       displayName: cargo doc
 - ${{ if ne('false', parameters.minrust) }}:
   - job: msrv
     displayName: "${{ format('Minimum supported Rust version: {0}', parameters.minrust) }}"
     dependsOn: []
     # This represents the minimum Rust version supported.
     # Tests are not run as tests may require newer versions of rust.
     pool:
       vmImage: ubuntu-18.04
     steps:
       - template: install-rust.yml
         parameters:
           rust: ${{ parameters.minrust }}
       # Run any user-specific setup steps
       - ${{ parameters.setup }}
       - script: cargo check
         workingDirectory: ${{ parameters.dir }}
         displayName: cargo check
       - script: cargo check --no-default-features
         workingDirectory: ${{ parameters.dir }}
         displayName: cargo check --no-default-features
       - script: cargo check --all-features
         workingDirectory: ${{ parameters.dir }}
         displayName: cargo check --all-features
 - ${{ if ne('', parameters.codecov_token) }}:
   - template: coverage.yml
     parameters:
       token: ${{ parameters.codecov_token }}
       setup: ${{ parameters.setup }}
       services: ${{ parameters.services }}
       env: ${{ parameters.env }}
       dir: ${{ parameters.dir }}
