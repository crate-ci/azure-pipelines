parameters:
  minrust: 1.32.0 # Rust 2018 with uniform paths
  benches: false
  prefix: ''
  envs: {}
  setup: []
  test_ignored: false
  single_threaded: false
  nightly_coverage: false
  check_all_features: true
  nightly_feature: ''
  test_features: ''
  test_arguments: '--' # Defaults to a separator

stages:
 # the format here is so that we can have _two_ instances of this whole
 # template in the upstream repository's testing setup, and give the stages
 # unique names.
 - stage: ${{ format('{0}check', parameters.prefix) }}
   ${{ if ne(parameters.prefix, '') }}:
     displayName: ${{ format('Compilation check ({0})', parameters.prefix) }}
   ${{ if eq(parameters.prefix, '') }}:
     displayName: Compilation check
   dependsOn: []
   jobs:
     - template: cargo-check.yml
       parameters:
         name: cargo_check
         benches: ${{ parameters.benches }}
         setup: ${{ parameters.setup }}
         all_features: ${{ parameters.check_all_features }}
 - ${{ if ne('false', parameters.minrust) }}:
   # This represents the minimum Rust version supported.
   # Tests are not run as tests may require newer versions of rust.
   - stage: ${{ format('{0}msrv', parameters.prefix) }}
     ${{ if ne(parameters.prefix, '') }}:
       displayName: "${{ format('Minimum supported Rust version: {1} ({0})', parameters.prefix, parameters.minrust) }}"
     ${{ if eq(parameters.prefix, '') }}:
       displayName: "${{ format('Minimum supported Rust version: {0}', parameters.minrust) }}"
     dependsOn: []
     jobs:
       - template: cargo-check.yml
         parameters:
          rust: ${{ parameters.minrust }}
          setup: ${{ parameters.setup }}
          all_features: ${{ parameters.check_all_features }}
 - stage: ${{ format('{0}test', parameters.prefix) }}
   ${{ if ne(parameters.prefix, '') }}:
     displayName: ${{ format('Test suite ({0})', parameters.prefix) }}
   ${{ if eq(parameters.prefix, '') }}:
     displayName: Test suite
   dependsOn: ${{ format('{0}check', parameters.prefix) }}
   jobs:
     - template: tests.yml
       parameters:
         envs: ${{ parameters.envs }}
         setup: ${{ parameters.setup }}
         test_ignored: ${{ parameters.test_ignored }}
         single_threaded: ${{ parameters.single_threaded }}
         nightly_feature: ${{ parameters.nightly_feature }}
         features: ${{ parameters.test_features }}
         arguments: ${{ parameters.test_arguments }}
 - stage: ${{ format('{0}style', parameters.prefix) }}
   ${{ if ne(parameters.prefix, '') }}:
     displayName: ${{ format('Style linting ({0})', parameters.prefix) }}
   ${{ if eq(parameters.prefix, '') }}:
     displayName: Style linting
   dependsOn: ${{ format('{0}check', parameters.prefix) }}
   jobs:
     - template: style.yml
       parameters:
         setup: ${{ parameters.setup }}
 - ${{ if ne('', parameters.codecov_token) }}:
    - stage: ${{ format('{0}coverage', parameters.prefix) }}
      ${{ if ne(parameters.prefix, '') }}:
        displayName: ${{ format('Code coverage ({0})', parameters.prefix) }}
      ${{ if eq(parameters.prefix, '') }}:
        displayName: Code coverage
      dependsOn: ${{ format('{0}test', parameters.prefix) }}
      jobs:
        - template: coverage.yml
          parameters:
            codecov_token: ${{ parameters.codecov_token }}
            envs: ${{ parameters.envs }}
            setup: ${{ parameters.setup }}
            nightly: ${{ parameters.nightly_coverage }}
            features: ${{ parameters.test_features }}
